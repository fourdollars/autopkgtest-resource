#!/bin/bash

set -euo pipefail

exec 3>&1
exec 1>&2

if [ "$0" = '/opt/resource/check' ]; then
    echo "[]" >&3
    exit
elif [ "$0" = '/opt/resource/in' ]; then
    cd "$1"
    jq -M -S . < /dev/stdin > /tmp/input.json

    package=$(jq -r .version.package < /tmp/input.json)
    version=$(jq -r .version.version < /tmp/input.json)

    if [ "$(jq -r '.version | has("log")' < /tmp/input.json)" = 'true' ]; then
        log=$(jq -r .version.log < /tmp/input.json)
        cd "$1"
        case "$log" in
            (https://paste.ubuntu.com/p/*)
                curl -fsSL "$log" | grep -A 999999999 '<div class="paste"><pre>' | grep -B 999999999 "^</pre>" | sed -e "s/.*<pre><span><\/span>//" -e "s/^<\/pre>.*//" > log.log
                ;;
            (https://paste.debian.net/*)
                curl -fsSL "$log" | grep -A 999999999 '<div class="highlight"><pre>' | grep -B 999999999 "^</pre>" | sed -e "s/.*<pre><span><\/span>//" -e "s/^<\/pre>.*//" > log.log
                ;;
        esac
    else
        log=
    fi

    if [ "$(jq -r '.version | has("summary")' < /tmp/input.json)" = 'true' ]; then
        summary=$(jq -r .version.summary < /tmp/input.json)
        cd "$1"
        case "$summary" in
            (https://paste.ubuntu.com/p/*)
                curl -fsSL "$summary" | grep -A 999999999 '<div class="paste"><pre>' | grep -B 999999999 "^</pre>" | sed -e "s/.*<pre><span><\/span>//" -e "s/^<\/pre>.*//" > summary.log
                ;;
            (https://paste.debian.net/*)
                curl -fsSL "$summary" | grep -A 999999999 '<div class="highlight"><pre>' | grep -B 999999999 "^</pre>" | sed -e "s/.*<pre><span><\/span>//" -e "s/^<\/pre>.*//" > summary.log
                ;;
        esac
    else
        summary=
    fi

    if [ -z "$log" ] || [ -z "$summary" ]; then
        json='{"version":{"package":"'"$package"'","version":"'"$version"'"}}'
    else
        json='{"version":{"package":"'"$package"'","version":"'"$version"'","log":"'$log'","summary":"'$summary'"}}'
        jq -n "$json" >&3
    fi
    exit
fi

cd "$1"
jq -M -S . < /dev/stdin > /tmp/input.json

if [ "$(jq -r '.params | has("path")' < /tmp/input.json)" = 'true' ]; then
    path=$(jq -r .params.path < /tmp/input.json)
else
    echo "You need to provide the path."
    exit 1
fi

if [ "$(jq -r '.source | has("pastebin")' < /tmp/input.json)" = 'true' ]; then
    PASTEBIN=1
    cat > ~/.pastebinit.xml <<ENDLINE
<pastebinit>
    <pastebin>$(jq -r .source.pastebin < /tmp/input.json)</pastebin>
    <author>$(jq -r .source.author < /tmp/input.json)</author>
    <format>$(jq -r .source.format < /tmp/input.json)</format>
</pastebinit>
ENDLINE
else
    PASTEBIN=
fi

if [ "$(jq -r '.params | has("path")' < /tmp/input.json)" = 'true' ]; then
    path=$(jq -r .params.path < /tmp/input.json)
else
    echo "You need to provide the path."
    exit 1
fi

SOURCE="$(dpkg-parsechangelog --show-field Source -l "$path"/debian/changelog)"
VERSION="$(dpkg-parsechangelog --show-field Version -l "$path"/debian/changelog)"
cd "$path"
if [ -d .git ]; then
    SHA=-$(git rev-parse --short HEAD)
else
    SHA=-none
fi
series="$(lsb_release -cs)"

if [ "$(jq -r '.params | has("args")' < /tmp/input.json)" = 'true' ]; then
    mapfile -t ARGS < <(jq -r '.params.args|.[]' < /tmp/input.json)
else
    ARGS=("--apt-upgrade" "--quiet")
fi

ARGS+=("--summary-file=$SOURCE-$VERSION$SHA-in-docker-$series-summary.log")
ARGS+=("--log-file=$SOURCE-$VERSION$SHA-in-docker-$series-complete.log")
ARGS+=("--output-dir=$SOURCE-$VERSION$SHA-in-docker-$series")

sed -i "s/'isolation-machine'//" /usr/bin/autopkgtest-virt-null

autopkgtest "${ARGS[@]}" -- null

echo "=== $SOURCE-$VERSION$SHA-in-docker-$series-summary.log ==="
cat "$SOURCE-$VERSION$SHA-in-docker-$series-summary.log"

if [ -n "$PASTEBIN" ]; then
    json='{"version":{"package":"'"$SOURCE"'","version":"'"$VERSION"'","log":"'$(cat "$SOURCE-$VERSION$SHA-in-docker-$series-complete.log" | pastebinit)'","summary":"'$(cat "$SOURCE-$VERSION$SHA-in-docker-$series-summary.log" | pastebinit)'"}}'
else
    json='{"version":{"package":"'"$SOURCE"'","version":"'"$VERSION"'"}}'
fi

jq -n "$json" >&3
