#!/bin/bash

set -euo pipefail

clearup ()
{
    rm -f /tmp/input.json /tmp/source-setup-commands.sh /tmp/params-setup-commands.sh
}

trap clearup EXIT INT TERM

exec 3>&1
exec 1>&2

if [ "$0" = '/opt/resource/check' ]; then
    echo '[{"digest":"sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}]' >&3
    exit
elif [ "$0" = '/opt/resource/in' ]; then
    cd "$1"
    jq -M -S . < /dev/stdin > /tmp/input.json
    if [ "$(jq -r '.params | has("skip") // false' < /tmp/input.json)" = 'true' ]; then
        skip="true"
    else
        skip="false"
    fi

    log=$(jq -r '.version.log // ""' < /tmp/input.json)
    if [ "$skip" = "false" ] && [ -n "$log" ]; then
        case "$log" in
            (https://paste.ubuntu.com/p/*)
                curl -fsSL "$log" | grep -A 999999999 '<div class="paste"><pre>' | grep -B 999999999 "^</pre>" | sed -e "s/.*<pre><span><\/span>//" -e "s/^<\/pre>.*//" > log.log
                echo "$log" > log.link
                ;;
            (https://paste.debian.net/*)
                curl -fsSL "$log" | grep -A 999999999 '<div class="highlight"><pre>' | grep -B 999999999 "^</pre>" | sed -e "s/.*<pre><span><\/span>//" -e "s/^<\/pre>.*//" > log.log
                echo "$log" > log.link
                ;;
        esac
    fi

    summary=$(jq -r '.version.summary // ""' < /tmp/input.json)
    if [ "$skip" = "false" ] && [ -n "$summary" ]; then
        case "$summary" in
            (https://paste.ubuntu.com/p/*)
                curl -fsSL "$summary" | grep -A 999999999 '<div class="paste"><pre>' | grep -B 999999999 "^</pre>" | sed -e "s/.*<pre><span><\/span>//" -e "s/^<\/pre>.*//" > summary.log
                echo "$summary" > summary.link
                ;;
            (https://paste.debian.net/*)
                curl -fsSL "$summary" | grep -A 999999999 '<div class="highlight"><pre>' | grep -B 999999999 "^</pre>" | sed -e "s/.*<pre><span><\/span>//" -e "s/^<\/pre>.*//" > summary.log
                echo "$summary" > summary.link
                ;;
        esac
    fi

    package=$(jq -r .version.package < /tmp/input.json)
    version=$(jq -r .version.version < /tmp/input.json)
    url=$(jq -r '.version.url // ""' < /tmp/input.json)
    if [ -n "$url" ]; then
        TARGET=$(basename "$url")
        echo "$url" >> "$TARGET".link
    fi

    WEBDAV="$(jq -r '.source.webdav // ""' < /tmp/input.json)"
    USERNAME="$(jq -r '.source.username // ""' < /tmp/input.json)"
    PASSWORD="$(jq -r '.source.password // ""' < /tmp/input.json)"

    if [ "$skip" = "false" ] && [ -n "$WEBDAV" ] && [ -n "$url" ]; then
        apt-get install --yes rclone
        mkdir -p ~/.config/rclone
        cat > ~/.config/rclone/rclone.conf <<ENDLINE
[remote]
type = webdav
url = $WEBDAV
vendor = other
user = $USERNAME
pass = $(rclone obscure "$PASSWORD")
ENDLINE
        args=(-P -L --ignore-times)
        rclone copy "${args[@]}" remote:"$TARGET" .
fi

    if [ -z "$url" ]; then
        json=$(cat <<ENDLINE
{
  "version": $(jq -c -M '.version' < /tmp/input.json),
  "metadata": [
    {"name": "$package", "value": "$version"}
  ]
}
ENDLINE
)
    else
        json=$(cat <<ENDLINE
{
  "version": $(jq -c -M '.version' < /tmp/input.json),
  "metadata": [
    {"name": "$package", "value": "$version"},
    {"name": "url",     "value": "$url"}
  ]
}
ENDLINE
)
    fi
    jq -n "$json" >&3
    exit
fi

cd "$1"
jq -M -S . < /dev/stdin > /tmp/input.json

if [ "$(jq -r '.params | has("path")' < /tmp/input.json)" = 'true' ]; then
    path=$(jq -r .params.path < /tmp/input.json)
else
    echo "You need to provide the path."
    exit 1
fi

if [ "$(jq -r '.source | has("pastebin")' < /tmp/input.json)" = 'true' ]; then
    PASTEBIN=1
    cat > ~/.pastebinit.xml <<ENDLINE
<pastebinit>
    <pastebin>$(jq -r .source.pastebin < /tmp/input.json)</pastebin>
    <author>$(jq -r .source.author < /tmp/input.json)</author>
    <format>$(jq -r .source.format < /tmp/input.json)</format>
</pastebinit>
ENDLINE
else
    PASTEBIN=
fi

WEBDAV="$(jq -r '.source.webdav // ""' < /tmp/input.json)"
USERNAME="$(jq -r '.source.username // ""' < /tmp/input.json)"
PASSWORD="$(jq -r '.source.password // ""' < /tmp/input.json)"

cd "$path"

debian=$(jq -r '.params.debian // ""' < /tmp/input.json)
if [ -n "$debian" ]; then
    if [ -d "../$debian/debian" ]; then
        rm -fr debian
        cp -rv "../$debian/debian" .
    elif [ -f "../$debian/changelog" ] && [ -f "../$debian/control" ] && [ -f "../$debian/copyright" ] && [ -f "../$debian/rules" ]; then
        rm -fr debian
        mkdir debian
        cp -rv "../$debian/*" debian
    else
        echo "$debian is not a Debian packaging folder."
        exit 1
    fi
fi

SOURCE="$(dpkg-parsechangelog --show-field Source -l debian/changelog)"
VERSION="$(dpkg-parsechangelog --show-field Version -l debian/changelog)"

if [ -d .git ]; then
    apt-get install --yes git
    SHA=-$(git rev-parse --short HEAD)
else
    SHA=""
fi
series="$(lsb_release -cs)"

if [ "$(jq -r '.params | has("args")' < /tmp/input.json)" = 'true' ]; then
    mapfile -t ARGS < <(jq -r '.params.args|.[]' < /tmp/input.json)
else
    ARGS=("--apt-upgrade" "--quiet")
fi

TARGET="$SOURCE-$VERSION$SHA-in-linux-container-$series"
ARGS+=("--summary-file=$TARGET-summary.log")
ARGS+=("--log-file=$TARGET-complete.log")
ARGS+=("--output-dir=$TARGET")

if [ "$(jq -r '.source | has("setup-commands")' < /tmp/input.json)" = 'true' ]; then
    jq -r '.source."setup-commands"' < /tmp/input.json > /tmp/source-setup-commands.sh
    chmod +x /tmp/source-setup-commands.sh
    ARGS+=("--setup-commands=/tmp/source-setup-commands.sh")
fi

if [ "$(jq -r '.params | has("setup-commands")' < /tmp/input.json)" = 'true' ]; then
    jq -r '.params."setup-commands"' < /tmp/input.json > /tmp/params-setup-commands.sh
    chmod +x /tmp/params-setup-commands.sh
    ARGS+=("--setup-commands=/tmp/params-setup-commands.sh")
fi

sed -i "s/'isolation-machine'//" /usr/bin/autopkgtest-virt-null

if autopkgtest "${ARGS[@]}" -- null; then
    RESULT="$?"
else
    RESULT="$?"
fi

if [ -n "$PASTEBIN" ]; then
    apt-get install --yes pastebinit
    log=$(cat "$TARGET-complete.log" | pastebinit)
    echo "full log: $log" >> "$TARGET-summary.log"
    summary=$(cat "$TARGET-summary.log" | pastebinit)
    url="$summary"
fi

if [ -n "$WEBDAV" ]; then
    apt-get install --yes rclone
    mkdir -p ~/.config/rclone
    cat > ~/.config/rclone/rclone.conf <<ENDLINE
[remote]
type = webdav
url = $WEBDAV
vendor = other
user = $USERNAME
pass = $(rclone obscure "$PASSWORD")
ENDLINE
    args=(-P -L --ignore-times)
    rclone copy "${args[@]}" "$TARGET-complete.log" remote:"$TARGET"
    log="$WEBDAV/$TARGET/$TARGET-complete.log"
    rclone copy "${args[@]}" "$TARGET-summary.log" remote:"$TARGET"
    summary="$WEBDAV/$TARGET/$TARGET-summary.log"
    rclone copy "${args[@]}" "$TARGET" remote:"$TARGET"
    url="$WEBDAV/$TARGET"
fi

echo "=== $TARGET-summary.log ==="
cat "$TARGET-summary.log"

digest="sha256:$(cat "$TARGET-complete.log" | sha256sum | awk '{print $1}')"

if [ -n "$PASTEBIN" ] || [ -n "$WEBDAV" ]; then
    json=$(cat <<ENDLINE
{
  "version": {
    "digest": "$digest",
    "package": "$SOURCE",
    "version": "$VERSION",
    "log": "$log",
    "summary": "$summary",
    "url": "$url"
  },
  "metadata": [
    {"name": "${SOURCE}", "value": "${VERSION}"},
    {"name": "url", "value": "${url}"}
  ]
}
ENDLINE
)
else
    json=$(cat <<ENDLINE
{
  "version": {
    "digest": "$digest",
    "package": "$SOURCE",
    "version": "$VERSION"
  },
  "metadata": [
    {"name": "${SOURCE}", "value": "${VERSION}"}
  ]
}
ENDLINE
)
fi

jq -n "$json" >&3

case "$RESULT" in
    (0)
        echo -e "EXIT STATUS\n\t0    all tests passed"
        ;;
    (2)
        echo -e "EXIT STATUS\n\t2    at least one test was skipped (or at least one flaky test failed)"
        ;;
    (4)
        echo -e "EXIT STATUS\n\t4    at least one test failed"
        ;;
    (6)
        echo -e "EXIT STATUS\n\t6    at least one test failed and at least one test skipped"
        ;;
    (8)
        echo -e "EXIT STATUS\n\t8    no tests in this package, or all non-superficial tests were skipped"
        ;;
    (12)
        echo -e "EXIT STATUS\n\t12   erroneous package"
        ;;
    (14)
        echo -e "EXIT STATUS\n\t14   erroneous package and at least one test skipped"
        ;;
    (16)
        echo -e "EXIT STATUS\n\t16   testbed failure"
        ;;
    (20)
        echo -e "EXIT STATUS\n\t20   other unexpected failures including bad usage"
        ;;
    (*)
        echo -e "EXIT STATUS\n\t$RESULT   unexpected exit status for autopkgtest"
        ;;
esac

DONTFAIL=$(jq -r '.params.dont_fail // false' < /tmp/input.json)

if [ "$(jq -r '.params | has("exit_status")' < /tmp/input.json)" = 'true' ]; then
    mapfile -t EXITSTATUS < <(jq -r '.params.exit_status | .[]' < /tmp/input.json)
else
    EXITSTATUS=()
fi

if [ "$DONTFAIL" = "true" ]; then
    exit
fi

if [ -z "${EXITSTATUS[*]}" ]; then
    exit "$RESULT"
else
    for exit_status in "${EXITSTATUS[@]}"; do
        if [ "${exit_status}" = "$RESULT" ]; then
            exit
        fi
    done
    exit 1
fi
